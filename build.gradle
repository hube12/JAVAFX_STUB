plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.3.0'
    id 'jacoco'
    id 'idea'
}

repositories {
    mavenCentral()
}
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
javafx {
    version = "11"
    modules = ['javafx.controls', 'javafx.fxml']
}
application{
    mainClassName = "edu.PCD.PodcastCollector.Main"
    applicationName="PodcastCollector"
}


runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    jpackage {
        // jpackageHome = '/usr/lib/jvm/jdk14'
        if(org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            // imageOptions = ['--win-console']
            installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    /* comment to remove cross-platform jar: */
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"
}
test {
    useJUnitPlatform {
        includeTags 'fast', 'smoke & feature-a'
        includeEngines 'junit-jupiter'
        maxHeapSize = '1G'
    }
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    finalizedBy(jacocoTestReport)
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': project.getProperty('mainClassName')
        )

    }
}

task fatJar(type: Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': project.getProperty('mainClassName')
        )

    }
    project.archivesBaseName="RELEASE_X"
    from {
        //WARNING IT IS REQUIRED TO LAUNCH FROM A NON JAVAFX START :https://github.com/javafxports/openjdk-jfx/issues/236
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

}
